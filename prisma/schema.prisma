// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name String?

  password String

  username String @unique
  email    String @unique

  role UserRole

  newsletter Newsletter[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Newsletter {
  id String @id @default(uuid())

  title   String
  content String @db.Text

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("newsletters")
}

model NewsletterMember {
  id String @id @default(uuid())

  email String @unique

  status NewsletterMemberStatus @default(PENDING)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("newsletter_members")
}

model Contact {
  id String @id @default(uuid())

  name    String
  email   String
  subject String
  message String @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contacts")
}

enum UserRole {
  ADMIN
}

enum NewsletterMemberStatus {
  SUBSCRIBE
  PENDING
}
