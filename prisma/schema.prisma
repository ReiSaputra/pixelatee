// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name     String? @default("Guest")
  password String
  email    String  @unique

  role UserRole

  permissions UserPermission?

  newsletter Newsletter[]
  portfolio  Portfolio[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model UserPermission {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  canReadNewsletter   Boolean @default(false) @map("can_read_newsletter")
  canWriteNewsletter  Boolean @default(false) @map("can_write_newsletter")
  canUpdateNewsletter Boolean @default(false) @map("can_update_newsletter")
  canDeleteNewsletter Boolean @default(false) @map("can_delete_newsletter")

  canReadPortfolio   Boolean @default(false) @map("can_read_portfolio")
  canWritePortfolio  Boolean @default(false) @map("can_write_portfolio")
  canUpdatePortfolio Boolean @default(false) @map("can_update_portfolio")
  canDeletePortfolio Boolean @default(false) @map("can_delete_portfolio")

  canReadAdmin   Boolean @default(false) @map("can_read_admin")
  canWriteAdmin  Boolean @default(false) @map("can_write_admin")
  canUpdateAdmin Boolean @default(false) @map("can_update_admin")
  canDeleteAdmin Boolean @default(false) @map("can_delete_admin")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_permissions")
}

model Newsletter {
  id String @id @default(uuid())

  title   String
  content String @db.Text

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("newsletters")
}

model NewsletterMember {
  id String @id @default(uuid())

  email String @unique

  status NewsletterMemberStatus @default(PENDING)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("newsletter_members")
}

model Portfolio {
  id String @id @default(uuid())

  title       String  @default("Untitled")
  description String? @db.Text

  status PortfolioStatus @default(DRAFT)

  mainImage   String? @map("main_image")
  secondImage String? @map("second_image")
  thirdImage  String? @map("third_image")
  fourthImage String? @map("fourth_image")
  fifthImage  String? @map("fifth_image")

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id])

  clientId String? @map("client_id")
  client   Client? @relation(fields: [clientId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("portfolios")
}

model Client {
  id String @id @default(uuid())

  name String
  logo String

  portfolio Portfolio[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("clients")
}

model Contact {
  id String @id @default(uuid())

  name    String
  email   String
  subject String
  message String @db.Text

  type ContactType

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contacts")
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}

enum PortfolioStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum NewsletterMemberStatus {
  SUBSCRIBE
  PENDING
}

enum ContactType {
  CUSTOMER_SERVICE
  IT_CONSULTATION
  UIUX_DEVELOPMENT
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
}
